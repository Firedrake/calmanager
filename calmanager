#! /usr/bin/perl

use strict;
use warnings;

use YAML::XS qw(LoadFile);
use Data::ICal;
use Digest::SHA qw(sha256_base64);
use Getopt::Std;
use Encode;
use LWP::UserAgent;
use XML::LibXML;
use XML::LibXML::XPathContext;

BEGIN {
  opendir D,'.';
  map {require "./$_";} sort grep /\.pl$/,readdir D;
  closedir D;
}

my %o=(c => 'config.yaml');
getopts('ldhc:v',\%o);

if ($o{h}) {
  print STDERR <<EOF;
Usage: $0 (-c configfile) (-l) (-d) (helper) (helper...)
-l lists helpers
-d deletes all calendar entries associated with a helper
-c verbose
EOF
  exit 0;
}
my $dtz='Europe/London';
my $y=LoadFile($o{c});
(my $phost=$y->{URL}) =~ s/([-a-z0-9])\/[-a-z0-9].*/$1/i;
my $ua=LWP::UserAgent->new;

my $hostname;
chomp ($hostname=`hostname -f`);

my %cg;
my %cc;
{
  my @hlist=map {s/:+$//;$_} sort grep /::$/,keys %Calmanager::;
  if ($o{l}) {
    print map {"$_\n"} @hlist;
    exit 0;
  }
  if (@ARGV) {
    my %a=map {$_ => 1} @ARGV;
    @hlist=grep {exists $a{$_}} @hlist;
  }
  if (scalar @hlist==0) {
    die "No helpers found of that name.\n";
  }
  if ($o{d} && scalar @hlist > 1) {
    die "I won't delete more than one helper at a time.\n";
  }
  foreach my $mode (@hlist) {
    my $cal;
    my $cat;
    {
      my $obj="Calmanager::$mode";
      no strict 'refs';
      unless ($o{d}) {
        $cal=$obj->generate($y);
      }
      $cat=$obj->category;
    }
    $cc{$cat}=1;
    unless ($o{d}) {
      foreach my $entry (@{$cal->entries}) {
        delete $entry->properties->{uid};
#        delete $entry->properties->{categories};
        $entry->add_properties(categories => $cat);
        my $uid=join('@',sha256_base64(encode('UTF-8',$entry->as_string)),$hostname);
        $entry->add_properties(uid => $uid);
        my $minical=Data::ICal->new;
        $minical->add_entry($entry);
        $cg{$uid}=$minical;
      }
    }
  }
}

my %p=(user => $y->{username},
       pass => $y->{password},
       url => $y->{URL});
my $req=HTTP::Request->new(REPORT => $p{url});
if (exists $p{user} && exists $p{pass}) {
  $req->authorization_basic($p{user},$p{pass});
}
$req->header('Content-Type','application/xml; charset=utf-8');
$req->header('Prefer','Return-minimal');
$req->header('Depth','1');
{
  my $doc=XML::LibXML::Document->new("1.0","UTF-8");
  my $xml=$doc->createElement('c:calendar-query');
  $doc->setDocumentElement($xml);
  $xml->setAttribute('xmlns:d' => 'DAV:');
  $xml->setAttribute('xmlns:c' => 'urn:ietf:params:xml:ns:caldav');
  {
    my $prop=XML::LibXML::Element->new('d:prop');
    $prop->addChild(XML::LibXML::Element->new('d:getetag'));
    $prop->addChild(XML::LibXML::Element->new('c:calendar-data'));
    $xml->addChild($prop);
  }
  {
    my $filter=XML::LibXML::Element->new('c:filter');
    my $e=XML::LibXML::Element->new('c:comp-filter');
    $e->setAttribute(name => 'VCALENDAR');
    $filter->addChild($e);
    $xml->addChild($filter);
  }
  $req->content($doc->toString);
}
my $res=$ua->request($req);

unless ($res->is_success) {
  die $p{url}."\n".$res->status_line."\n";
}

my $doc=XML::LibXML->load_xml(string => $res->content);
my $xpc=XML::LibXML::XPathContext->new($doc);
$xpc->registerNs('c','urn:ietf:params:xml:ns:caldav');
$xpc->registerNs('d','DAV:');
foreach my $n ($xpc->findnodes('//c:calendar-data')) {
  my $c=Data::ICal->new(data => $n->textContent);
  foreach my $entry ($c->events) {
    my %cats=map {$_ => 1} split /,/,getprop($entry,'categories');
    my $uid=getprop($entry,'uid');
    foreach my $c (keys %cats) {
      if (exists $cc{$c} && exists $cg{$uid}) {
        # we have a matching UID, AND we're in a controlled category
        # so nothing has changed; delete the generated version
        if ($o{v}) {
          warn "deleting new $uid from $c\n";
        }
        delete $cg{$uid};
        last;
      } elsif (exists $cc{$c}) {
        # we're in a controlled category but the UID doesn't exist in the
        # newly-generated entries. So delete the old version.
        my @href=$xpc->findnodes('../../../d:href',$n);
        my $uri=$href[0]->textContent;
        if ($uri =~ /^\/[-a-z0-9]/i) {
          $uri=$phost.$uri;
        }
        my @etag=$xpc->findnodes('../d:getetag',$n);
        my $etag=$etag[0]->textContent;
        my $req2=HTTP::Request->new(DELETE => $uri);
        if (exists $p{user} && exists $p{pass}) {
          $req2->authorization_basic($p{user},$p{pass});
        }
        $req2->header('If-Match',$etag);
        my $res2=$ua->request($req2);
      }
    }
  }
}

foreach my $newuid (keys %cg) {
  my @e;
  foreach my $len (8,4,4,4,12) {
    my @l;
    foreach (1..$len) {
      push @l,sprintf("%1x",int(rand(16)));
    }
    push @e,join('',@l);
  }
  my $etag=join('-',@e);
  my $newurl="$y->{URL}/$etag.ics";
  my $req2=HTTP::Request->new(PUT => $newurl);
  if (exists $p{user} && exists $p{pass}) {
    $req2->authorization_basic($p{user},$p{pass});
  }
  $req2->header('Content-Type','text/calendar; charset=utf-8');
  $req2->content($cg{$newuid}->as_string);
  my $res2=$ua->request($req2);
}

sub getprop {
  my $entry=shift;
  my $propname=shift;
  my $ret;
  if (defined $entry->property($propname)) {
    my %cats;
    foreach my $e (@{$entry->property($propname)}) {
      $cats{$e->value}=1;
    }
    $ret=join(',',sort keys %cats);
  }
}
